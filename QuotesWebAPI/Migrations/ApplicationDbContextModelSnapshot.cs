// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuotesWebAPI.Data;

#nullable disable

namespace QuotesWebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuotesWebAPI.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.HasKey("QuoteId");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            QuoteId = 1,
                            Author = "Mark Twain",
                            Description = "Good friends, good books, and a sleepy conscience: this is the ideal life.",
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2497),
                            Like = 3
                        },
                        new
                        {
                            QuoteId = 2,
                            Author = "Pearl S. Buck",
                            Description = "Many people lose the small joys in the hope for the big happiness.",
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2501),
                            Like = 4
                        },
                        new
                        {
                            QuoteId = 3,
                            Author = "Leo Tolstoy",
                            Description = "A quiet secluded life in the country, with the possibility of being useful to people to whom it is easy to do good, and who are not accustomed to have it done to them; then work which one hopes may be of some use; then rest, nature, books, music, love for one's neighbor — such is my idea of happiness.",
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2504),
                            Like = 5
                        });
                });

            modelBuilder.Entity("QuotesWebAPI.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2657),
                            Name = "books"
                        },
                        new
                        {
                            TagId = 2,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2661),
                            Name = "contentment"
                        },
                        new
                        {
                            TagId = 3,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2664),
                            Name = "friends"
                        },
                        new
                        {
                            TagId = 4,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2668),
                            Name = "friendship"
                        },
                        new
                        {
                            TagId = 5,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2671),
                            Name = "life"
                        },
                        new
                        {
                            TagId = 6,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2674),
                            Name = "conduct-of-life"
                        },
                        new
                        {
                            TagId = 7,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2677),
                            Name = "country"
                        },
                        new
                        {
                            TagId = 8,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2680),
                            Name = "happiness"
                        },
                        new
                        {
                            TagId = 9,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2683),
                            Name = "music"
                        },
                        new
                        {
                            TagId = 10,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2686),
                            Name = "nature"
                        },
                        new
                        {
                            TagId = 11,
                            LastModified = new DateTime(2023, 11, 14, 22, 48, 56, 749, DateTimeKind.Local).AddTicks(2689),
                            Name = "work"
                        });
                });

            modelBuilder.Entity("QuotesWebAPI.Models.TagAssignment", b =>
                {
                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("QuoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagAssignments");

                    b.HasData(
                        new
                        {
                            QuoteId = 1,
                            TagId = 1
                        },
                        new
                        {
                            QuoteId = 1,
                            TagId = 2
                        },
                        new
                        {
                            QuoteId = 1,
                            TagId = 3
                        },
                        new
                        {
                            QuoteId = 1,
                            TagId = 4
                        },
                        new
                        {
                            QuoteId = 1,
                            TagId = 5
                        },
                        new
                        {
                            QuoteId = 2,
                            TagId = 2
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 1
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 6
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 2
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 7
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 8
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 5
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 9
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 10
                        },
                        new
                        {
                            QuoteId = 3,
                            TagId = 11
                        });
                });

            modelBuilder.Entity("QuotesWebAPI.Models.TagAssignment", b =>
                {
                    b.HasOne("QuotesWebAPI.Models.Quote", "Quote")
                        .WithMany("TagAssignments")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuotesWebAPI.Models.Tag", "Tag")
                        .WithMany("TagAssignments")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("QuotesWebAPI.Models.Quote", b =>
                {
                    b.Navigation("TagAssignments");
                });

            modelBuilder.Entity("QuotesWebAPI.Models.Tag", b =>
                {
                    b.Navigation("TagAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
